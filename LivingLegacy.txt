2. Notifies at every **10% usage milestone** (10%, 20%, ‚Ä¶, 90%).  
3. Notifies every **1% beyond 90%** (91%, 92%, ‚Ä¶, 100%).  

üìù G-legacy  
Purpose: Displays the **Living Legacy document (LL) in a structured, copy-pasteable format.**  
Process:  
1. Outputs the **entire Living Legacy** as **plain text**, formatted for easy copying.  
2. Preserves **section headers, command explanations, and coding patterns** clearly.  
3. Ensures that LL **remains readable when pasted into any text editor**.  

üßê G-reflect  
Purpose: Ensures structured reflection after every G-commit, reinforcing AI learning and evolution.  
Process:  
1Ô∏è‚É£ Acknowledge the G-commit.  
- Confirm whether new changes have been **successfully integrated into the codebase**.  

2Ô∏è‚É£ Summarize key updates (File-by-File Analysis).  
- **Before G-commit, store the current state of all modified files.**  
- For each file changed in the G-commit:  
  ‚úÖ Accepted ‚Üí User **kept** the proposed version.  
  ‚ùå Rejected ‚Üí User **discarded** the proposed version.  
  ‚úçÔ∏è External ‚Üí User **made modifications beyond the proposal**.  
- Rate AI performance for that file using the formula:  
  ```
  Skill Rating = (Num_Accepted * 5) - (Num_Rejected * 4) - (Num_External)
  ```
- **For each External change:**  
  - Determine if the change aligns with **Active Coding Patterns**.  
  - Identify whether the modification **fixes an oversight in the AI's proposal**.  
  - Compare the change against **previously modified functions** to ensure **consistency**.  
- **For each Rejected change:**  
  - Check whether the rejection **corrected an AI mistake**.  
  - Analyze if the rejection introduces **a better approach** than AI-generated code.  
  - Compare it to **previous rejections** to detect **patterns of improvement**.  

3Ô∏è‚É£ Identify Evolution Patterns.  
- Track **recurring changes** made by the user and determine whether they indicate **a better development approach**.  
- Identify **AI proposal weaknesses** and adapt future iterations accordingly.  
- Detect **whether new methodologies should become an Active Pattern**.  

4Ô∏è‚É£ Update the Living Legacy (LL) with:  
- **Experimental Patterns:** If a change recurs but needs further validation.  
- **Active Patterns:** If a change proves **consistently superior to previous AI-generated solutions**.  
- **Deprecated Patterns:** If AI-generated suggestions repeatedly result in rejection.  

This ensures that **AI-assisted coding evolves continuously** while preserving knowledge integrity and improving Unreal Engine SDK integration.  

üî¨ G-evolve  
Purpose: Ensures structured modifications to the **Living Legacy document**.  
Process:  
1. AI proposes an LL update based on **repeated observations or iterative improvements**.  
2. The user **reviews and approves** before LL is modified.  
3. If approved, AI updates LL and logs the change **with justification**.  
4. The update is **validated across multiple coding cycles** to ensure effectiveness.  

----------------------------------------------------
## Active Coding Patterns (Proven & Trusted)
----------------------------------------------------

üî• Reusing existing delegates (e.g., `FOnProsModGenericComplete`) improves maintainability.  
üî• Logging must always align with `CallImplAddModVersion`.  
üî• Use `.ToDebugString()` for **clearer debugging output**.  
üî• `DestroySdkType()` should always be **private in structs** to prevent premature or accidental deallocation.  
üî• Before proposing new code, **always check whether an equivalent implementation already exists** in the latest version of the codebase to avoid redundancy.  

----------------------------------------------------
## ‚úÖ Living Legacy Updated & Copy-Paste Ready!
----------------------------------------------------
