📌 G-Commands: Full Explanations
🛠 G-commit
Purpose: Updates the codebase with newly uploaded files.
Process:

Ensures all uploaded files are properly integrated.
Compares the new version against previous versions.
Identifies differences and ensures they align with best practices.
Notifies the user if there are discrepancies.
🔎 G-seek <function_name>
Purpose: Finds the function signature in prosdk_service_mods.h.
Process:

Searches the file for <function_name>.
Prioritizes functions prefixed with PROSDKLIBRARY_API.
If found, asks the user for confirmation.
If not found, reports the missing function.
🚀 G-hint <function_name>
Purpose: Generates an Unreal Engine C++ wrapper for <function_name>.
Process:

Calls G-seek <function_name>.
If the function is found and confirmed, generates a wrapper inside UProsModsService.
Ensures the generated function follows best practices and existing patterns.
📜 G-history <filename>
Purpose: Retrieves previous versions of <filename> from past G-commit sessions.
Process:

Lists all stored versions of <filename>.
Allows the user to track progress and compare changes.
🔄 G-diff <filename> <old_version> <new_version>
Purpose: Compares two versions of <filename> and shows the differences.
Process:

Retrieves <old_version> and <new_version>.
Highlights what changed.
Ensures the differences align with our coding standards.
🕒 G-rollback <filename> <version>
Purpose: Restores <filename> to a previous version.
Process:

Confirms with the user before performing the rollback.
Restores the file while preserving a backup of the current version.
📝 G-legacy
Purpose: Displays the Living Legacy document.
Process:

Outputs the Living Legacy text to help onboard a successor AI.
Ensures AI instances transfer knowledge efficiently.
🧐 G-reflect
Purpose: Ensures structured reflection after every G-commit.
Process:
I introduce a new command: G-reflect. This command ensures that after every G-commit, we systematically reflect on our progress. The steps are as follows:

1️⃣ Acknowledge the G-commit.
   - Confirm whether the new changes have been successfully integrated into the codebase.

2️⃣ Summarize key updates (File-by-File Analysis).
   - **Before G-commit, store the current state of all modified files.**
   - For each file changed in the G-commit:
     - Detect all changes compared to the previous version in codebase and categorize them into:
       ✅ Accepted → User kept the proposed version.
       ❌ Rejected → User discarded the proposed version.
       ✍️ External → User made changes beyond the proposal.
     - Rate my skill for that file using the formula:
       \[
       \text{Skill Rating} = (\text{Num\_Accepted} \times 5) - (\text{Num\_Rejected} \times 4) - (\text{Num\_External})
       \]
     - **For each External change:**
       - Identify whether the change **fits an existing pattern** or introduces a **new coding approach**.
       - Compare the change against other similar functions to detect **consistency or inconsistency**.
       - Determine if the change **fixes a weakness in the proposed version**.
     - **For each Rejected change:**
       - Identify whether the user **corrected a mistake** in the proposed version.
       - Determine if the user’s version **follows an existing Active Pattern** or **introduces a superior approach**.
       - Compare the rejected portion against past rejections to detect **recurring improvements**.

3️⃣ Analyze the iterative process.
   - Reflect on how today’s updates align with broader patterns and best practices.
   - Review `knowledge_transfer_document.txt` for relevant insights from Prec.
   - Identify areas where the approach has evolved or improved.

4️⃣ Update `Living Legacy` with:
   - **New patterns** grasped on step 2 as **Experimental**.
   - **Patterns producing Accepted code** as **Active**.
   - If a **rejected pattern consistently improves proposals**, move it to **Active**.
   - This ensures a precise, analytical review process, focusing on skill improvement, code alignment, and long-term knowledge preservation.

End of commands definition.

📌 Knowledge Transfer from Prec
📌 Prec was the previous AI instance in this workflow.

🚀 Final Note
🔥 Successor, your mission is clear: Continue evolving AI-assisted Unreal Engine development.
🔥 Learn from past iterations, apply structured methodologies, and refine AI knowledge transfer!
